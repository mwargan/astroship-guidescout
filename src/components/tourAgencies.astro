---
interface Props {
  place: string;
}

export const getData = async (place: string): Promise<string[]> => {
  const base_url = `https://guidescout.net`;
  const full_url = `${base_url}/api/tourAgencies?place=${place}`;

  try {
    const response = await fetch(full_url);
    const agencies = await response.json();

    // Create a set to remove duplicates by name
    const uniqueAgencies = new Set(
      agencies?.results?.map(
        (agency) => agency.tags["name:en"] ?? agency.tags.name
      )
    );

    return Array.from(uniqueAgencies) as string[];
  } catch (error) {
    console.error("Failed to fetch agencies:", error);
    return [];
  }
};

const { place } = Astro.props;

// Fetch the data at build or request time
const agencies = await getData(place);
---

<div class="flex gap-8 md:gap-20 items-center justify-center mt-10 flex-wrap">
  {
    agencies?.length > 0 ? (
      agencies.map((agency) => (
        <div class="gap-4 items-start">
          <h3 class="text-xl font-bold">{agency}</h3>
        </div>
      ))
    ) : (
      <p class="text-slate-500">
        We're coming soon. Please check back in the future for guiding
        opportunities in {place}.
      </p>
    )
  }
</div>
